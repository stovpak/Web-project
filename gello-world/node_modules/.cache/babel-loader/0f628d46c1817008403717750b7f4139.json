{"ast":null,"code":"'use strict';\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\n\nvar getMarkupWrap = require('./getMarkupWrap');\n\nvar invariant = require('./invariant');\n/**\r\n * Dummy container used to render all markup.\r\n */\n\n\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n/**\r\n * Pattern used by `getNodeName`.\r\n */\n\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n/**\r\n * Extracts the `nodeName` of the first element in a string of markup.\r\n *\r\n * @param {string} markup String of markup.\r\n * @return {?string} Node name of the supplied markup.\r\n */\n\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n/**\r\n * Creates an array containing the nodes rendered from the supplied markup. The\r\n * optionally supplied `handleScript` function will be invoked once for each\r\n * <script> element that is rendered. If no `handleScript` function is supplied,\r\n * an exception is thrown if any <script> elements are rendered.\r\n *\r\n * @param {string} markup A string of valid HTML markup.\r\n * @param {?function} handleScript Invoked once for each rendered <script>.\r\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\r\n */\n\n\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\n  var nodeName = getNodeName(markup);\n  var wrap = nodeName && getMarkupWrap(nodeName);\n\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n    var wrapDepth = wrap[0];\n\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = Array.from(node.childNodes);\n\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;","map":null,"metadata":{},"sourceType":"script"}